一、集中式和分布式
	集中式版本控制，即建立中央服务器，在中央服务器保管所有版本控制内容。若你需要对某个内容进行修改时，需从“中央服务器”先提取至本地，在完成修改后，重新提交至“中央服务器”。
	
	分布式版本控制，即每个本地版本含有全套内容（每个本地版本即为中央服务器）。
二、安装GIT
	msysgit是Windows版的Git，从http://msysgit.github.io/下载，然后按默认选项安装即可
	
三、基本内容
3.1 创建版本库
	1、初始化一个Git仓库，使用"git init"
	2、添加文件至Git仓库：
		a、使用git add<file>,PS:可以反复多次使用，添加多个文件
		b、使用git commit，完成提交。
		
3.2 版本回退
	git status 理解仓库当前状态
	git diff 查看修改内容
	->HEAD 指向的版本就是当前版本。
	git log  查看提交历史
	git log --pretty=oneline
	
	git relog  查看命令历史
	git reset --hard HEAD    回退版本

3.3 管理修改
	git add 将工作区第一次修改的内容放入暂存区，准备提交
	git commit  只负责将暂存区内容提交至
	
3.4 撤销修改
	git checkout -- <file> 将工作区的修改全部撤销
	*如果修改内容尚未放到“暂存区”，则回退到版本库版本；
	*如果修改内容之前提交到“暂存区”，又做了修改，则撤销修改将回到“暂存区”版本
		
3.5 删除文件
	git rm <file> 删除版本库文件
	如果误删文件，可通过git checkout恢复之前版本。

四、远程仓库
4.1 添加远程库
	a、关联远程库
		git remote add origin git@server-name:path/repo-name.git;
	b、第一次推送master
		git push -u origin master
	c、再次推送
		git push origin master
		
4.2 从远程库克隆
	git clone
	
五、分支管理
5.1 创建与合并分支
	查看分支：git brach
	创建分支：git brache <name>
	切换分支：git checkout <name>
	创建+切换分支： git checkout -b <name>
	合并某分支到当前分支： git merge <name>
	删除分支： git branch -d <name>
	
5.2 解决冲突
	各个版本及分支都有修改主要在master和支线间。
	当git无法自动合并分支时，先人工解决冲突，再提交，完成合并。
	
	git log --graph 可以看到分支合并图
	
5.3 分支管理策略
	使用Fast forward模式进行合并分支，在这种模式下，删除分支后，将清除分支信息。
	git merge --no-ff -m "content" <branch>

5.4 Bug分支
	git stash 将当前工作现场“储藏”起来。
	git stash list 查看封存的工作现场
		
	恢复工作现场
		一种：git stash apply  #需要删除stash内容
			git stash drop
		二种：git stash pop
		
5.5 Feature 分支
	已经提交分支，进行强行删除：
	git branch -d <branchName>
	
5.6 多人协作
	1、查看远程库信息，git remove -v
	2、从本地推送分支git push origin branch-name ,如果推送失败，则先用 git pull 抓取远程的新提交文件；
	3、本地创建和远程分支：git checkout -b branch-name origin/branch-name
	4、建立本地分支和远程分支的关联：git branch --set-upstream branch-name origin/branch-name;
	
六、标签管理
	1、查看所有标签：git tag
	2、创建标签：git tag <name> <commit id>
	3、查看标签信息：git show <tagname>
	4、删除标签：git tag -d <tag-name>
	5、推送标签：git push origin <tag-name>
	6、推送全部未推送的本地标签：git push origin --tags
	7、删除远程标签：git push origin :refs/tags/<tagname>
	
七、忽略特殊文件
	需要忽略某些文件是，编写.gitignore
	.gitignore文件本身需要放在版本库中
	
	
八、Q&A
	Q1：如果输入$ git remote add origin git@github.com:djqiang（github帐号名）/gitdemo（项目名）.git 
    提示出错信息：fatal: remote origin already exists.
    解决办法如下：
    1、先输入$ git remote rm origin
    2、再输入$ git remote add origin git@github.com:djqiang/gitdemo.git 就不会报错了！
    3、如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section 'remote.origin'. 我们需要修改gitconfig文件的内容
    4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc
    5、找到一个名为gitconfig的文件，打开它把里面的[remote "origin"]那一行删掉就好了！
 
 
    Q2：如果输入$ ssh -T git@github.com
    出现错误提示：Permission denied (publickey).因为新生成的key不能加入ssh就会导致连接不上github。
    解决办法如下：
    1、先输入$ ssh-agent，再输入$ ssh-add ~/.ssh/id_key，这样就可以了。
    2、如果还是不行的话，输入ssh-add ~/.ssh/id_key 命令后出现报错Could not open a connection to your authentication agent.解决方法是key用Git Gui的ssh工具生成，这样生成的时候key就直接保存在ssh中了，不需要再ssh-add命令加入了，其它的user，token等配置都用命令行来做。
    3、最好检查一下在你复制id_rsa.pub文件的内容时有没有产生多余的空格或空行，有些编辑器会帮你添加这些的。
 
 
    Q3：如果输入$ git push origin master
    提示出错信息：error:failed to push som refs to .......
    解决办法如下：
    1、先输入$ git pull origin master //先把远程服务器github上面的文件拉下来
    2、再输入$ git push origin master
    3、如果出现报错 fatal: Couldn't find remote ref master或者fatal: 'origin' does not appear to be a git repository以及fatal: Could not read from remote repository.
    4、则需要重新输入$ git remote add origingit@github.com:djqiang/gitdemo.git
 
 
    使用git在本地创建一个项目的过程
    $ makdir ~/hello-world    //创建一个项目hello-world
    $ cd ~/hello-world       //打开这个项目
    $ git init             //初始化 
    $ touch README
    $ git add README        //更新README文件
    $ git commit -m 'first commit'     //提交更新，并注释信息“first commit”
    $ git remote add origin git@github.com:defnngj/hello-world.git     //连接远程github项目  
    $ git push -u origin master     //将本地项目更新到github项目上去
 
   
    gitconfig配置文件
         Git有一个工具被称为git config，它允许你获得和设置配置变量；这些变量可以控制Git的外观和操作的各个方面。这些变量可以被存储在三个不同的位置： 
         1./etc/gitconfig 文件：包含了适用于系统所有用户和所有库的值。如果你传递参数选项’--system’ 给 git config，它将明确的读和写这个文件。 
         2.~/.gitconfig 文件 ：具体到你的用户。你可以通过传递--global 选项使Git 读或写这个特定的文件。
         3.位于git目录的config文件 (也就是 .git/config) ：无论你当前在用的库是什么，特定指向该单一的库。每个级别重写前一个级别的值。因此，在.git/config中的值覆盖了在/etc/gitconfig中的同一个值。
        在Windows系统中，Git在$HOME目录中查找.gitconfig文件（对大多数人来说，位于C:\Documents and Settings\$USER下）。它也会查找/etc/gitconfig，尽管它是相对于Msys 根目录的。这可能是你在Windows中运行安装程序时决定安装Git的任何地方。
 
        配置相关信息：
        2.1　当你安装Git后首先要做的事情是设置你的用户名称和e-mail地址。这是非常重要的，因为每次Git提交都会使用该信息。它被永远的嵌入到了你的提交中：
　　$ git config --global user.name "John Doe"
　　$ git config --global user.email johndoe@example.com
 
       2.2    你的编辑器(Your Editor)
　　现在，你的标识已经设置，你可以配置你的缺省文本编辑器，Git在需要你输入一些消息时会使用该文本编辑器。缺省情况下，Git使用你的系统的缺省编辑器，这通常可能是vi 或者 vim。如果你想使用一个不同的文本编辑器，例如Emacs，你可以做如下操作：
　　$ git config --global core.editor emacs
 
      2.3 检查你的设置(Checking Your Settings)
　　如果你想检查你的设置，你可以使用 git config --list 命令来列出Git可以在该处找到的所有的设置:
　　$ git config --list
      你也可以查看Git认为的一个特定的关键字目前的值，使用如下命令 git config {key}:
　　$ git config user.name
 
      2.4 获取帮助(Getting help)
	　　如果当你在使用Git时需要帮助，有三种方法可以获得任何git命令的手册页(manpage)帮助信息:
	　　$ git help <verb>
	　　$ git <verb> --help
	　　$ man git-<verb>
	　　例如，你可以运行如下命令获取对config命令的手册页帮助:
	　　$ git help config